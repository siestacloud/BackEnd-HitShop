package rest

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"gitlab.com/siteasservice/project-architecture/templates/template-svc-golang/internal/transport/rest/handler"

	_ "gitlab.com/siteasservice/project-architecture/templates/template-svc-golang/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/sirupsen/logrus"
	l "github.com/sirupsen/logrus"
	"github.com/spf13/viper"

	echoSwagger "github.com/swaggo/echo-swagger" // echo-swagger middleware
)

type Server struct {
	e *echo.Echo
	h *handler.Handler
}

//New return point to new server.
func NewServer(h *handler.Handler) (*Server, error) {
	return &Server{
		e: echo.New(),
		h: h,
	}, nil
}

func (s *Server) Run(port string) error {

	if err := s.cfgLogRus(); err != nil {
		return err
	}

	var runChan = make(chan os.Signal, 1)

	// ctrl+c/ctrl+x interrupt
	signal.Notify(runChan, os.Interrupt, syscall.SIGTSTP)
	ctx, cancel := context.WithTimeout(
		context.Background(),
		10*time.Second,
	)

	// defer cancel()
	defer func() {
		logrus.Info("Server was gracefully shutdown")
		cancel()
	}()

	logrus.Info(viper.GetString("server.address"))
	logrus.WithFields(logrus.Fields{
		"tag": "a tag",
	}).Info("An info message")

	server := &http.Server{
		Addr: viper.GetString("server.address"),
		// ReadTimeout:  s.c.Server.Timeout.Read,
		// WriteTimeout: s.c.Server.Timeout.Write,
		// IdleTimeout:  s.c.Server.Timeout.Idle,
	}

	s.cfgRouter()

	// Run the server on a new gorutine
	go func() {
		if err := s.e.StartServer(server); err != nil {
			logrus.Info(err)
		}
	}()

	// Block on this let know, why the server is shutting down
	interrupt := <-runChan

	logrus.Infof("Server is shutting down due to %+v\n", interrupt)
	if err := server.Shutdown(ctx); err != nil {
		logrus.Errorf("Server was unable to gracefully shutdown due to err: %+v", err)
		return err
	}

	return nil
}

func (s *Server) cfgLogRus() error {
	level, err := l.ParseLevel("info")
	if err != nil {
		return err
	}
	l.SetLevel(level)
	if viper.GetString("server.logrus.level") == "debug" {
		logrus.SetReportCaller(true)
	}
	if viper.GetBool("server.logrus.json") {

		logrus.SetFormatter(&logrus.JSONFormatter{})
	}
	return nil
}

//configureRouter Set handlers for URL path's
func (s *Server) cfgRouter() {
	// s.e.Use(s.ShowStatus)
	s.e.Use(middleware.GzipWithConfig(middleware.GzipConfig{
		Level: 5,
	}))

	s.e.GET("/swagger/*", echoSwagger.WrapHandler)

	auth := s.e.Group("/auth")
	auth.POST("/sign-up", s.h.SignUp()) // ендпоинт Авторизации
	auth.POST("/sign-in", s.h.SignIn()) // ендпоинт Аутентификации

	api := s.e.Group("/api")
	api.Use(s.h.UserIdentity) // JWT token auth
	api.GET("/", s.h.Test())

}
