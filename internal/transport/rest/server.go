package rest

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"tservice-checker/internal/config"
	"tservice-checker/internal/transport/rest/handler"
	"tservice-checker/pkg"

	_ "tservice-checker/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/go-playground/validator"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/sirupsen/logrus"

	echoSwagger "github.com/swaggo/echo-swagger" // echo-swagger middleware
)

type Server struct {
	e *echo.Echo
	c *config.Cfg
	h *handler.Handler
}

//NewServer конструктор
func NewServer(config *config.Cfg, h *handler.Handler) (*Server, error) {
	return &Server{
		e: echo.New(),
		c: config,
		h: h,
	}, nil
}

func (s *Server) Run() error {

	if err := s.cfgLogRus(); err != nil {
		return err
	}

	pkg.InfoPrint("server", "ok", "mess")
	var runChan = make(chan os.Signal, 1)

	// ctrl+c/ctrl+x interrupt
	signal.Notify(runChan, os.Interrupt, syscall.SIGTSTP)

	server := &http.Server{Addr: s.c.Address}
	s.cfgRouter()

	// Run the server on a new gorutine
	go func() {
		s.e.Validator = pkg.NewCustomValidator(validator.New())
		if err := s.e.StartServer(server); err != nil {
			logrus.Info("err: ", err)
		}
	}()

	// Block on this let know, why the server is shutting down
	interrupt := <-runChan

	logrus.Infof("Server is shutting down due to %+v\n", interrupt)
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer func() {
		logrus.Info("Server was gracefully shutdown")
		cancel()
	}()

	if err := server.Shutdown(ctx); err != nil {
		logrus.Errorf("Server was unable to gracefully shutdown due to err: %+v", err)
		return err
	}
	return nil
}

//cfgLogRus настройка logrus
func (s *Server) cfgLogRus() error {
	level, err := logrus.ParseLevel("info")
	if err != nil {
		return err
	}
	logrus.SetLevel(level)
	if s.c.Logrus.LogLevel == "debug" {
		logrus.SetReportCaller(true)
	}
	if s.c.Logrus.JSON {

		logrus.SetFormatter(&logrus.JSONFormatter{})
	}
	return nil
}

//configureRouter Set handlers for URL path's
func (s *Server) cfgRouter() {
	// s.e.Use(s.ShowStatus)
	s.e.Use(middleware.GzipWithConfig(middleware.GzipConfig{
		Level: 5,
	}))
	s.e.GET("/swagger/*", echoSwagger.WrapHandler)
	//* serve any file from the assets directory for path /static/*
	//* request to /static/js/main.js will fetch and serve assets/js/main.js file
	s.e.Static("/static", "assets")

	auth := s.e.Group("/auth")
	// * GET  /auth/static/register			— отдает статику с form-data для регистрации пользователя
	// * GET  /auth/static/login			— отдает статику с form-data для аутентификации пользователя
	// * POST /auth/register 				— регистрация пользователя;
	// * POST /auth/login 					— аутентификация пользователя;

	auth.GET("/static/register", s.h.StaticRegister())
	auth.GET("/static/login", s.h.StaticLogin())
	auth.POST("/register", s.h.Register())
	auth.POST("/login", s.h.Login())

	api := s.e.Group("/api")
	api.Use(s.h.UserIdentity) //! доступ ограничен по JWT token
	sessions := api.Group("/sessions")
	// * GET /api/sessions/static/extract			— отдает статику с MultipartForm-data для передачи архивов от клиента
	// * POST /api/sessions/extract					— извлечение сессии из переданных данных от клиента (zip,tdata);
	// * POST /api/sessions/:phone  				— создание сессии по переданному номеру телефона (требует передачу проверочного кода);
	// * GET /api/sessions/:phone  					— проверка наличия(и ее живучесть) сохраненной сессии по переданному номеру телефона;

	sessions.GET("/static/extract", s.h.StaticExtract())
	sessions.POST("/extract", s.h.ExtractSession())
	sessions.POST("/:phone", s.h.CreateSession())
	sessions.GET("/:phone", s.h.GetSessionByPhoneNumber())
	sessions.DELETE("/:phone", s.h.DeleteSession())
	sessions.PUT("/:phone", s.h.UpdateSession())

	extract := s.e.Group("/extract")
	// * GET /extract			— отдает статику с MultipartForm-data для передачи архивов от клиента
	extract.Use(s.h.UserIdentity)

	notexist := s.e.Group("*")
	notexist.Use(s.h.UserIdentity)
	notexist.GET("", s.h.RedirectToExtract())

}
